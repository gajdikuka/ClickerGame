// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: helloworld.proto
// </auto-generated>
// Original file comments:
// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Helloworld {
  /// <summary>
  /// The greeting service definition.
  /// </summary>
  public static partial class Greeter
  {
    static readonly string __ServiceName = "helloworld.Greeter";

    static readonly grpc::Marshaller<global::Helloworld.Username> __Marshaller_helloworld_Username = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Helloworld.Username.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Helloworld.Reply> __Marshaller_helloworld_Reply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Helloworld.Reply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Helloworld.Success> __Marshaller_helloworld_Success = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Helloworld.Success.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Helloworld.Usercred> __Marshaller_helloworld_Usercred = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Helloworld.Usercred.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Helloworld.Clicks> __Marshaller_helloworld_Clicks = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Helloworld.Clicks.Parser.ParseFrom);

    static readonly grpc::Method<global::Helloworld.Username, global::Helloworld.Reply> __Method_listEvent = new grpc::Method<global::Helloworld.Username, global::Helloworld.Reply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "listEvent",
        __Marshaller_helloworld_Username,
        __Marshaller_helloworld_Reply);

    static readonly grpc::Method<global::Helloworld.Username, global::Helloworld.Success> __Method_ClickEvent = new grpc::Method<global::Helloworld.Username, global::Helloworld.Success>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ClickEvent",
        __Marshaller_helloworld_Username,
        __Marshaller_helloworld_Success);

    static readonly grpc::Method<global::Helloworld.Username, global::Helloworld.Success> __Method_ResetEvent = new grpc::Method<global::Helloworld.Username, global::Helloworld.Success>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ResetEvent",
        __Marshaller_helloworld_Username,
        __Marshaller_helloworld_Success);

    static readonly grpc::Method<global::Helloworld.Usercred, global::Helloworld.Success> __Method_AddEvent = new grpc::Method<global::Helloworld.Usercred, global::Helloworld.Success>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddEvent",
        __Marshaller_helloworld_Usercred,
        __Marshaller_helloworld_Success);

    static readonly grpc::Method<global::Helloworld.Usercred, global::Helloworld.Success> __Method_LoginEvent = new grpc::Method<global::Helloworld.Usercred, global::Helloworld.Success>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LoginEvent",
        __Marshaller_helloworld_Usercred,
        __Marshaller_helloworld_Success);

    static readonly grpc::Method<global::Helloworld.Username, global::Helloworld.Clicks> __Method_ClickBetoltEvent = new grpc::Method<global::Helloworld.Username, global::Helloworld.Clicks>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ClickBetoltEvent",
        __Marshaller_helloworld_Username,
        __Marshaller_helloworld_Clicks);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Helloworld.HelloworldReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Greeter</summary>
    public abstract partial class GreeterBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Helloworld.Reply> listEvent(global::Helloworld.Username request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Helloworld.Success> ClickEvent(global::Helloworld.Username request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Helloworld.Success> ResetEvent(global::Helloworld.Username request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Helloworld.Success> AddEvent(global::Helloworld.Usercred request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Helloworld.Success> LoginEvent(global::Helloworld.Usercred request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Helloworld.Clicks> ClickBetoltEvent(global::Helloworld.Username request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Greeter</summary>
    public partial class GreeterClient : grpc::ClientBase<GreeterClient>
    {
      /// <summary>Creates a new client for Greeter</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public GreeterClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Greeter that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public GreeterClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected GreeterClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected GreeterClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Helloworld.Reply listEvent(global::Helloworld.Username request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return listEvent(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Helloworld.Reply listEvent(global::Helloworld.Username request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_listEvent, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Helloworld.Reply> listEventAsync(global::Helloworld.Username request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return listEventAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Helloworld.Reply> listEventAsync(global::Helloworld.Username request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_listEvent, null, options, request);
      }
      public virtual global::Helloworld.Success ClickEvent(global::Helloworld.Username request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ClickEvent(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Helloworld.Success ClickEvent(global::Helloworld.Username request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ClickEvent, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Helloworld.Success> ClickEventAsync(global::Helloworld.Username request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ClickEventAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Helloworld.Success> ClickEventAsync(global::Helloworld.Username request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ClickEvent, null, options, request);
      }
      public virtual global::Helloworld.Success ResetEvent(global::Helloworld.Username request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResetEvent(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Helloworld.Success ResetEvent(global::Helloworld.Username request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ResetEvent, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Helloworld.Success> ResetEventAsync(global::Helloworld.Username request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResetEventAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Helloworld.Success> ResetEventAsync(global::Helloworld.Username request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ResetEvent, null, options, request);
      }
      public virtual global::Helloworld.Success AddEvent(global::Helloworld.Usercred request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddEvent(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Helloworld.Success AddEvent(global::Helloworld.Usercred request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddEvent, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Helloworld.Success> AddEventAsync(global::Helloworld.Usercred request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddEventAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Helloworld.Success> AddEventAsync(global::Helloworld.Usercred request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddEvent, null, options, request);
      }
      public virtual global::Helloworld.Success LoginEvent(global::Helloworld.Usercred request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LoginEvent(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Helloworld.Success LoginEvent(global::Helloworld.Usercred request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LoginEvent, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Helloworld.Success> LoginEventAsync(global::Helloworld.Usercred request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LoginEventAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Helloworld.Success> LoginEventAsync(global::Helloworld.Usercred request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LoginEvent, null, options, request);
      }
      public virtual global::Helloworld.Clicks ClickBetoltEvent(global::Helloworld.Username request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ClickBetoltEvent(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Helloworld.Clicks ClickBetoltEvent(global::Helloworld.Username request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ClickBetoltEvent, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Helloworld.Clicks> ClickBetoltEventAsync(global::Helloworld.Username request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ClickBetoltEventAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Helloworld.Clicks> ClickBetoltEventAsync(global::Helloworld.Username request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ClickBetoltEvent, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override GreeterClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GreeterClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(GreeterBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_listEvent, serviceImpl.listEvent)
          .AddMethod(__Method_ClickEvent, serviceImpl.ClickEvent)
          .AddMethod(__Method_ResetEvent, serviceImpl.ResetEvent)
          .AddMethod(__Method_AddEvent, serviceImpl.AddEvent)
          .AddMethod(__Method_LoginEvent, serviceImpl.LoginEvent)
          .AddMethod(__Method_ClickBetoltEvent, serviceImpl.ClickBetoltEvent).Build();
    }

  }
}
#endregion
